name: CI for DAGs

# 실행 조건 : dags 폴더의 main 브랜치에 추가되었을 경우 실행 
on:
  pull_request:
    paths:
      - 'dags/**'
    branches: [ "main" ]

# code convention 체크(flake8, isort, black formatting)
jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:  
      - name: Checkout code
        uses: actions/checkout@v4

      # 파이썬 설치
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # poetry 가상환경 설치
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
      # 모듈 설치
      - name: Install dependencies
        run: poetry install --no-root

      # 코드 검사 실시
      # python 코드 스타일 위반 여부 확인(최대 줄 길이 300)
      - name: Run flake8
        run: poetry run flake8 --max-line-length=300 dags

      # 코드 포맷이 정해진 기준과 일치하는지 확인 (--check는 실제 변경 없이 검사만)
      - name: Check formatting with Black
        run: poetry run black --check dags

      # import 순서가 정해진 기준을 따르는지 확인
      - name: Check import order with isort
        run: poetry run isort dags --check-only
        
  deploy:
    needs: lint-and-format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 1. 인증
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 2. gcloud 설치 (인증 후)
      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # 3. Dags GCS에 업로드
      - name: Upload DAGs to GCS
        run: |
          gsutil -m rsync -r ./dags gs://${{ secrets.GCS_BUCKET_NAME }}/dags
      
      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"DAG 배포 성공: GCS에 정상적으로 업로드되었습니다!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"DAG 배포 실패: GCS 업로드 중 오류 발생."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}  
